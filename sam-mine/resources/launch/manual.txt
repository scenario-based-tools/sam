This release of Sam/Mine provides automated experiment execution functionality.

Contents
--------

  1. Running Experiments
  2. System Requirements and Parameters
  
  
1. RUNNING EXPERIMENTS
----------------------

To run an experiment, call:

  sam_mine <inputfile.xes.gz> <support> <confidence>
  
All log files for experiments are stored in the directory './experiments/'.
For instance, call:

  sam_mine experiments\crossftp_succinct\crossftp_succinct_traceset.xes.gz 10 1.0

The scenarios will be mined from the given log file. The results will
be stored in a directory 'results_XXX' next to the given log file. The
results directory contains the file 

  results.html
  
which provides an overview on the mining results: input tree,
statistics, discovered scenarios and coverage of the tree by the
scenarios. The file

  lscs.txt
  
contains all discovered LSCs that are shown graphically in
'results.html' in textual form.

The directory name 'results_XXX' mentions the call parameters and the
time, so running the experiment again will not overwrite the old results.

There are some "Experiment Suites" available.

  * To run a all experiments, execute 'run_ase2013_experiments.bat'.
    
    The entire suite takes around 2 hours to discover scenarios
    (between 1 second and 160 seconds per individual experiment)
    
    + additional time needed to render graphics of the result files which can 
    take several seconds to a few minutes per graph depending on size and
    complexity. (Time taken on an Intel CORE i5 with 2.4 GHz).
    
  * To obtain results quicker, execute 'run_ase2013_experiments_fast.bat'
    which will skip the experiments with long running times. This suite
    takes around 6 minutes to finish
     
    + additional time needed to render graphics of the result files which can 
    take several seconds to a few minutes per graph depending on size and
    complexity. (Time taken on an Intel CORE i5 with 2.4 GHz).
    
    
2. REQUIREMENTS AND PARAMETERS
------------------------------

The tool is ready to run on Windows and Linux 32bit or 64bit that have at
least 2GB of free memory available. For more details and other operating
systems see below.

The tool is written in Standard Java and runs on all Java Virtual Machines
provided by Sun/Oracle that support Java 1.6 Update 22 or higher. 

To render graphics of the results, the tool calls two additional tools:

  1. The tool needs 'mscgen' to render the discovered LSCs. A Windows binary
     and a statically-linked Linux binary are provided in this release in
     directory ./resources/mscgen. Other versions of Mscgen and the source
     code are available from http://www.mcternan.me.uk/mscgen/
     
  2. The tool needs GraphViz Dot to render the trees. The tools requires
     GraphViz Dot to be installed on the system. GraphViz Dot is available
     from http://www.graphviz.org/
  
The path to the binaries of these tools are stored in './sam_mine.properties'
The default settings assume 'mscgen' to be stored in  ./resources/mscgen' and
GraphViz Dot to be available on the path (i.e. can be called from anywhere).
Adjust the settings in './sam_mine.properties' to your system to run the tool.

Rendering of coverage trees (which may consume significant time) can be
switched off by changing property "sam.render_trees" in file
"sam_mine.properties".

The default memory allocation for the tool is 2.0GB. You may want to adjust
the default memory allocation if your machine has less memory available to
allocate, or if you pick a low 'support' parameter value which will increase
memory consumption. To adjust the memory allocated to the JVM,

  1. Edit sam_mine.bat/sam_mine.sh, and
  2. Change the parameter -Xmx2G to an appropriate value, e.g.
       -Xmx1G or -Xmx4G
     Note that allocating more than 2GB of memory requires a 64bit JVM.
     
The batch experiments can all be run with 1GB of memory. Note that execution
time increases drastically when too little memory is allocated to the JVM
causing frequent sweeps of the Garbage Collector in the available memory.