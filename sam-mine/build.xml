<project name="sam" default="all">
	
	<!--
	
	     Generic ant build file for Java libraries. AGPL3.0
	     Copyright (c) 2010 Dirk Fahland.
	     
	     Ant targets:
	     
	     - all: compile Java classes
	     - jar: packaged compiled classes into Java Archive (JAR) and
	                  generate necessary meta-data information
	                  
         - dist: create restributable source archive including all source files,
                 build files, and libraries required to build this package
         - dist-bin: create restributable binary, i.e. pre-compiled Java Archive
                     with required external runtime libraries and documentation

	     - check: run test cases for compiled classes (corresponds to 'build')
	     - jarcheck: run test cases for packaged Java Archive
	     - distcheck: create redistributable source archive, and run an
	                  automatic build and check for this archive
	                  
	     - clean: remove all generated files 
	     
	     To use this build file for a specific project, set the project name
	     of this file and modify 'configure.properties' and 'build.am.xml'.
	     
	     'configure.properties'
	        defines several directories for source files, library paths, and
	        target directories as well as names of files to be considered by
	        different tasks of this build file
	     
	     'build.am.xml'
	        defines several ant targets that are referenced from the ant
	        targets in this buildfile, specifically for user-defined builds
	        in different stages of the build process
	     
	  -->
	
	<dirname property="make.basedir" file="${ant.file}" />
	
	<property file="configure.properties" />
	
	<!-- the basic class path for this package, using the libraries in libs-external -->
    <path id="base.path">
      <pathelement path="${classpath}"/>
      <fileset dir="${home}/${libs.external}">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement location="${bin}"/>
    </path>

	<import file="build.am.xml"  />
	
	<!-- default target all -->
	<target name="all" depends="build" description="Build ${build.name}" />
	
	<!-- compile -->
	<target name="build" depends="pre-build"
			description="Build ${build.name} classes.">
		<echo message="Compiling in ${make.basedir}..." />
		<mkdir dir="${dir.bin}" />
		<javac classpathref="base.path"
			srcdir="${dir.src}"
         	destdir="${dir.bin}"
         	debug="on" />
	</target>
	
	<!-- call check script to run test-cases -->
	<target name="check" depends="build"
			description="Run test cases.">
		<ant antfile="${dir.tests}/build.xml" target="check" inheritall="true">
		</ant>
	</target>
	
	<!-- build jar file of this package -->
	<target name="jar" depends="build"
			description="Create Java Archive (JAR) of ${build.name}.">
		<!-- create temporary build directory and copy files -->
		<echo message="Copying all files to build directory ${dir.builddir}/" />
		<mkdir dir="${dir.builddir}"/>
		<copy todir="${dir.builddir}">
			<!-- compiled class files -->
			<fileset dir="${dir.bin}">
				<include name="**/*.class"/>
			</fileset>
			<!-- auxiliary files from home directory -->
			<fileset dir="${home}">
				<include name="META-INF/MANIFEST.MF"/>
				<include name="AUTHORS"/>
				<include name="ChangeLog"/>
				<include name="LICENSE"/>
				<include name="README"/>
			</fileset>
	    </copy>
		
		<!-- build distributable JAR file -->
		<echo message="Creating distributable JAR file ${home}/${build.target}.jar" />
		<jar destfile="${dir.builddir}/${build.target}.jar" basedir="${dir.builddir}/" manifest="META-INF/MANIFEST.MF" >
			<include name="**/*.class"/>
			<include name="AUTHORS"/>
			<include name="ChangeLog"/>
			<include name="LICENSE"/>
			<include name="README"/>
		</jar>
	</target>
	
	<!-- build source distribution file of this package -->
	<target name="dist"
			description="Create source distribution .zip of ${build.name}.">
		<!-- include all source files -->
		<mkdir dir="${dir.distdir}/${src}" />
		<copy todir="${dir.distdir}/${src}">
			<fileset dir="${dir.src}">
				<include name="**/*.java"/>
			</fileset>
		</copy>
		<!-- include all additional files defined in the configuration file -->
		<copy todir="${dir.distdir}">
			<fileset refid="distfiles.includes" />
		</copy>
		<!-- include the standard files of the distribution -->
		<copy todir="${dir.distdir}">
			<fileset dir="${home}">
				<include name="META-INF/MANIFEST.MF"/>
				<include name="AUTHORS"/>
				<include name="ChangeLog"/>
				<include name="LICENSE"/>
				<include name="README"/>
			</fileset>
		</copy>
		
		<mkdir dir="${dir.distdir}/${libs.external}" />
		<copy todir="${dir.distdir}/${libs.external}">
			<fileset dir="${home}/${libs.external}">
				<include name="*.jar" />
			</fileset>
		</copy>
		
		<!-- make all build files part of the source distribution -->
		<copy file="${home}/build.xml" todir="${dir.distdir}" />
		<copy file="${home}/build.am.xml" todir="${dir.distdir}" />
		<copy file="${home}/configure.properties" todir="${dir.distdir}" />
		
		<mkdir dir="${dir.distdir}/${tests}" />
		<copy todir="${dir.distdir}/${tests}">
			<fileset dir="${dir.tests}" />
		</copy>

		<zip destfile="${home}/${package}.zip">
			<zipfileset dir="${dir.distdir}" />
		</zip>
	</target>
	
	<!-- build binary distribution file of this package -->
	<target name="dist-bin" depends="jar"
			description="Create binary distribution .zip of ${build.name}.">
		
		<!-- mkdir dir="${dir.distbindir}/${libs}" / -->
		<!-- copy file="${dir.builddir}/${build.target}.jar" todir="${dir.distbindir}/${libs}" / -->
		<copy file="${dir.builddir}/${build.target}.jar" todir="${dir.distbindir}" />
		
		<!-- include all additional files defined in the configuration file -->
		<copy todir="${dir.distbindir}">
			<fileset refid="distbinfiles.includes" />
		</copy>
		
		<mkdir dir="${dir.distbindir}/${libs.external}" />
		<copy todir="${dir.distbindir}/${libs.external}">
			<fileset dir="${home}/${libs.external}">
				<include name="*.jar" />
			</fileset>
		</copy>
		
		<!--
		<mkdir dir="${dir.distbindir}/examples" />
		<copy todir="${dir.distbindir}/examples">
			<fileset dir="${home}/examples">
				<include name="*.xes.gz" />
			</fileset>
		</copy>
		-->
		
		<mkdir dir="${dir.distbindir}/experiments_ase2013" />
		<copy todir="${dir.distbindir}/experiments_ase2013" >
			<fileset dir="${home}/experiments_ase2013">
				<include name="**/columba.xes.gz" />
				<include name="**/crossftp.xes.gz" />
			</fileset>
		</copy>
		
		<mkdir dir="${dir.distbindir}/resources" />
		<copy todir="${dir.distbindir}/resources">
			<fileset dir="${home}/resources/">
				<include name="mscgen/bgd.dll" />
				<include name="mscgen/mscgen.exe" />
				<include name="mscgen/mscgen" />
			</fileset>
		</copy>
		
		<copy todir="${dir.distbindir}">
			<fileset dir="${home}/resources/launch">
				<include name="sam_mine*.bat" />
				<include name="sam_mine*.sh" />
				<include name="run_*.bat" />
				<include name="run_*.sh" />
				<include name="manual.txt" />
			</fileset>
		</copy>
		
		<zip destfile="${home}/${package}-bin.zip">
			<zipfileset dir="${dir.distbindir}" />
		</zip>
	</target>
	
	<!-- build jar file and run test cases on the distributable -->
	<target name="jarcheck" depends="jar"
			description="Run test cases for the Java Archive of ${build.name}.">
		<antcall target="check">
			<param name="compiled.classes" value="${dir.builddir}/${build.target}.jar"/>
			<param name="test.libs-external" value="${libs.external}"/>
		</antcall>
	</target>
	
	<!-- build distributable file and run test cases on the distributable -->
	<target name="distcheck" depends="dist"
			description="Create source distribution of the ${build.name} and run extensive tests for that distribution.">
		<mkdir dir="${dir.distcheckdir}" />
		<unzip dest="${dir.distcheckdir}" overwrite="true" src="${home}/${package}.zip" />

		<ant target="build" antfile="build.xml" dir="${dir.distcheckdir}" inheritall="false" inheritrefs="false">
		</ant>
		<ant target="check" antfile="build.xml" dir="${dir.distcheckdir}" inheritall="false" inheritrefs="false">
		</ant>
		
		<!-- clean up -->
		<delete dir="${dir.distcheckdir}" failonerror="false" includeemptydirs="true"/>
		<delete dir="${dir.distdir}" failonerror="false" includeemptydirs="true"/>
	</target>
	
	<!-- clean all files that have been generated -->
	<target name="clean"
			description="Clean all temporary build directories and temporary files.">
		<delete dir="${dir.distcheckdir}" includeemptydirs="true" failonerror="false"/>
		<delete dir="${dir.distbindir}" includeemptydirs="true" failonerror="false"/>
		<delete dir="${dir.distdir}" includeemptydirs="true" failonerror="false"/>
		<delete dir="${dir.builddir}" includeemptydirs="true" failonerror="false"/>
		<delete failonerror="false">
			<fileset dir="${dir.bin}">
			    <include name="**/*.class"/>
			</fileset>
			<filename name="${home}/${build.target}.jar"/>
		</delete>
	</target>
	
	<!-- clean all files that have been generated -->
	<target name="svn-clean" depends="clean,pre-svn-clean"
			description="Remove all generated files and set directory back to situation in the repository.">
		<delete failonerror="false">
			<fileset dir="${home}">
				<include name="${build.target}*.zip"/>
				<include name="${package}*.zip"/>
			</fileset>
		</delete>
	</target>
</project>
